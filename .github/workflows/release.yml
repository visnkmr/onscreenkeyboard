name: Build CLI Binary

on:
  push:
  pull_request:
  release:
    types:
      - published

concurrency:
  group: ${{ github.ref }}-${{ github.event_name == 'release' }}
  cancel-in-progress: true

env:
  NAME: onscreenkeyboard
  DESC: A simple onscreenremote for PC with some basic controls

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: ${{ github.ref }},
              name: `OnScreenKeyboard v${process.env.PACKAGE_VERSION}`,
              body: 'Checkout commit for detailed changelog on what has changed.',
              draft: true,
              prerelease: false
            })
            return data.id

  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - run: |
            sudo apt-get update
            sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libpango1.0-dev libatk1.0-dev libglib2.0-dev libgdk-pixbuf2.0-dev librust-gdk-sys-dev
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - name: Install Dependencies
        run: |
            sudo chown -R $(whoami) $(brew --prefix)/*
            brew install pkg-config pango gtk+4 libadwaita gstreamer
        if: ${{ matrix.os == 'macos-latest' }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release -p onscreenkeyboard

      # Windows scripting isn't the same.
      - name: Get Variables (Windows)
        run: |
          echo "$env:GITHUB_ENV"
          echo ("TAG=" + $env:GITHUB_REF.replace('refs/tags/', '')) >> $env:GITHUB_ENV
          echo "CLI_PATH=onscreenkeyboard.exe" >> $env:GITHUB_ENV
          echo "OS=Windows" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-latest'

      - name: Get Variables (MacOS)
        run: |
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "CLI_PATH=onscreenkeyboard" >> $GITHUB_ENV
          echo "OS=MacOS" >> $GITHUB_ENV
        if: matrix.os == 'macos-latest'

      - name: Get Variables (Linux)
        run: |
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "CLI_PATH=onscreenkeyboard" >> $GITHUB_ENV
          echo "OS=Linux-GNU" >> $GITHUB_ENV
        if: matrix.os == 'ubuntu-latest'

      - name: Upload Binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.OS }}-onscreenkeyboard
          path: target/release/${{ env.CLI_PATH }}

      - name: Update Release
        # if: github.event_name == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          file: target/release/${{ env.CLI_PATH }}
          tag: ${{ github.ref }}
          overwrite: true
          asset_name: onscreenkeyboard-${{ env.TAG }}-${{ env.OS }}-x86_64